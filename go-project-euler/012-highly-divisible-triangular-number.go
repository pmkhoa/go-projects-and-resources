// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?


package main

import (
    "fmt"
    "math"
)

func triangle(n int) int {
    return n * (n + 1) / 2
}

func count_factors(n int) int {
    sqrt := int(math.Ceil(math.Sqrt(float64(n))))
    count := 0
    for i := 1; i <= sqrt; i++ {
        if n % i == 0 {
            // increase by 2 since there's another
            // factor on the opposite side of the sqrt
            count += 2
        }
    }
    return count
}

func main() {
    i := 1
    for {
        var triangle_val = triangle(i)
        if count_factors(triangle_val) > 500 {
            fmt.Println(triangle_val)
            break
        }
        i = i + 1
    }
}
